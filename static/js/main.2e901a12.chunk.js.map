{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","React","useState","withoutSort","sortedField","setSortedField","reverse","setReverse","vizibleGoods","goods","result","sort","a","b","Alphabetically","localeCompare","Length","length","getPrepearedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,mFAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,eAAAA,E,0BAAAA,E,iBAAAA,M,KAML,IAyBaE,EAAgB,WAC3B,MAAsCC,IAAMC,SAASJ,EAASK,aAA9D,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA8BJ,IAAMC,UAAS,GAA7C,mBAAOI,EAAP,KAAgBC,EAAhB,KAGMC,EA9BkB,SACxBC,EACAL,EACAE,GAEA,IAAMI,EAAM,YAAOD,GAiBnB,OAfAC,EAAOC,MAAK,SAACC,EAAWC,GACtB,OAAQT,GACN,KAAKN,EAASgB,eACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKf,EAASkB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OACtB,QACE,OAAO,MAITX,GACFI,EAAOJ,UAGFI,EAQcQ,CAFV,UAAOnB,GAE4BK,EAAaE,GAmB3D,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAG,SAAU,UAAW,CACtB,WAAYjB,IAAgBN,EAASgB,iBAGzCQ,QA3BR,WACEjB,EAAeP,EAASgB,iBAmBpB,iCAYA,wBACEM,KAAK,SACLD,UACEE,IAAG,SAAU,aAAc,CACzB,WAAYjB,IAAgBN,EAASkB,SAGzCM,QA9BR,WACEjB,EAAeP,EAASkB,SAsBpB,4BAYA,wBACEI,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAaf,IAEfgB,QApCR,WACEf,GAAYD,IA8BR,sBAWGF,GAAeE,IACd,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAvDZ,WACEjB,EAAeP,EAASK,aACxBI,GAAW,IAkDH,sBAWN,6BACGC,EAAae,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC1HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2e901a12.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  withoutSort = '',\n  Alphabetically = 'alphabet',\n  Length = 'length',\n}\n\nconst getPrepearedGoods = (\n  goods: string[],\n  sortedField: SortType,\n  reverse: boolean,\n) => {\n  const result = [...goods];\n\n  result.sort((a: string, b: string) => {\n    switch (sortedField) {\n      case SortType.Alphabetically:\n        return a.localeCompare(b);\n      case SortType.Length:\n        return a.length - b.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (reverse) {\n    result.reverse();\n  }\n\n  return result;\n};\n\nexport const App: React.FC = () => {\n  const [sortedField, setSortedField] = React.useState(SortType.withoutSort);\n  const [reverse, setReverse] = React.useState(false);\n  const goods = [...goodsFromServer];\n\n  const vizibleGoods = getPrepearedGoods(goods, sortedField, reverse);\n\n  function sortByAlphabet() {\n    setSortedField(SortType.Alphabetically);\n  }\n\n  function handleReset() {\n    setSortedField(SortType.withoutSort);\n    setReverse(false);\n  }\n\n  function sortByLength() {\n    setSortedField(SortType.Length);\n  }\n\n  function sortByReverse() {\n    setReverse(!reverse);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-info', {\n              'is-light': sortedField !== SortType.Alphabetically,\n            })\n          }\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button', 'is-success', {\n              'is-light': sortedField !== SortType.Length,\n            })\n          }\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !reverse,\n          })}\n          onClick={sortByReverse}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortedField || reverse) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleReset}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {vizibleGoods.map((good) => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}